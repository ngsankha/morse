{"name":"Morse","tagline":"what if morse code became a programming language?","body":"# Morse\r\n\r\nAn estoric programming language consisting of only `.` and `_`.\r\n\r\n## Example\r\n\r\nThe following program takes the input of two numbers from the user and adds them. It asks for the input again in case the result is zero.\r\n\r\n```\r\n____\r\n____\r\n_...\r\n_....\r\n__._\r\n_._.. _\r\n```\r\n\r\n## Usage\r\n\r\nYou can run your programs by:\r\n\r\n    ./morse [filename]\r\n\r\n## Syntax\r\n\r\nThe execution environment maintains only 2 stacks, one for integers and other for characters.\r\n\r\n### Stack Manipulation\r\n\r\nOperations on the integer stack:\r\n* `.` - Push an integer to the stack [parameter: positive integer].\r\n* `_` - Duplicate the top most integer in the stack.\r\n* `_.` - Swap two topmost integers in the stack.\r\n* `__` - Pop topmost integer from the stack.\r\n\r\nOperations on the character stack:\r\n* `_..` - Push a character to the stack [parameter: character].\r\n* `_._` - Duplicate the top most character in the stack.\r\n* `__.` - Swap two topmost characters in the stack.\r\n* `___` - Pop topmost character from the stack.\r\n\r\n### Arithmetic Operations\r\n* `_...` - Add top most integers and replace them with the result.\r\n* `_--_` - Subtract top most integers and replace them with the result.\r\n* `_._.` - Multiply top most integers and replace them with the result.\r\n* `_.__` - Divide top most integers and replace them with the result.\r\n* `__..` - Take modulus of top most integers and replace them with the result.\r\n\r\n### Input/Output\r\n* `__._` - Print topmost integer on the stack.\r\n* `___.` - Print topmost character on the stack.\r\n* `____` - Take an input of an integer from the user.\r\n* `_....` - Take an input of a character from the user.\r\n\r\n### Flow Control\r\n* `_..._` - Jump to a line number. [parameter: line number]\r\n* `_.._.` - Jump to a line number if topmost integer is positive. [parameter: line number]\r\n* `_..__` - Jump to a line number if topmost integer is negative. [parameter: line number]\r\n* `_._..` - Jump to a line number if topmost integer is zero. [parameter: line number]\r\n\r\n### Representing literals\r\n\r\nNumbers can be represented in their binary form, with the 0s being `.` and 1s being `_`. Characters can be represented as the corresponding binary format of their ASCII code.\r\n\r\n**Note:** You can only represent positive integers right now.\r\n\r\nFor example:\r\n* 2 is `_.`\r\n* 20 is `_._..`\r\n* A is `_....._` (binary representation of 65)\r\n\r\n## License\r\n\r\nMIT\r\n\r\n## Contact\r\n\r\nThis was made out of sheer joblessness by Sankha. Follow him [@sankha93](https://twitter.com/sankha93) on Twitter.","google":"UA-42948095-1","note":"Don't delete this file! It's used internally to help with page regeneration."}